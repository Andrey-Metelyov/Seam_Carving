type: edu
custom_name: stage3
files:
- name: src/seamcarving/Main.kt
  visible: true
  text: |
    package seamcarving

    fun main() {
        print("Hello, World!")
    }
  learner_created: false
- name: test/SeamCarvingTest.java
  visible: false
  text: |
    import org.apache.commons.codec.binary.Hex;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.imageio.ImageIO;
    import java.awt.image.BufferedImage;
    import java.io.ByteArrayOutputStream;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.util.Arrays;
    import java.util.List;


    class CheckFailException extends Exception {
        public CheckFailException(String s) {
            super(s);
        }
    }

    class OutFile {
        String hash;
        String filename;
        int width;
        int height;

        OutFile(String filename, int width, int height, String hash) {
            this.filename = filename;
            this.width = width;
            this.height = height;
            this.hash = hash;
        }

        public boolean compareWithActualMD5() throws CheckFailException {
            try {
                File imgPath = new File(filename);
                BufferedImage sourceImage = ImageIO.read(imgPath);

                BufferedImage rgbImage =
                    new BufferedImage(sourceImage.getWidth(), sourceImage.getHeight(), BufferedImage.TYPE_INT_RGB);
                for (int i = 0; i < sourceImage.getWidth(); i++) {
                    for (int j = 0; j < sourceImage.getHeight(); j++) {
                        rgbImage.setRGB(i, j, sourceImage.getRGB(i, j));
                    }
                }

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(rgbImage, "bmp", baos);

                MessageDigest md = MessageDigest.getInstance("MD5");
                md.update(baos.toByteArray());
                byte[] digest = md.digest();
                String actualHash = Hex.encodeHexString(digest);
                if (!actualHash.equalsIgnoreCase(hash)) {
                    throw new CheckFailException(
                        String.format(
                            "Hash sum of your image (%s) does not match expected value",
                            actualHash));
                }
            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        filename));
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                throw new CheckFailException("Internal test error. please report to Hyperskill team");
            }

            return true;
        }

        public boolean compareActualDimensions() throws CheckFailException {
            try {
                BufferedImage image = ImageIO.read(new File(filename));

                if (image == null) {
                    throw new CheckFailException(
                        String.format(
                            "File format error. Looks like your output '%s' is not a valid image file.",
                            filename));
                }

                if (image.getWidth() != width) {
                    throw new CheckFailException(
                        String.format(
                            "Dimensions mismatch. Output image width: %d; expected width: %d",
                            image.getWidth(), width));
                }

                if (image.getHeight() != height) {
                    throw new CheckFailException(
                        String.format(
                            "Dimensions mismatch. Output image height: %d; expected height: %d",
                            image.getHeight(), height));
                }

            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        filename));
            }

            return true;
        }
    }

    public class SeamCarvingTest extends StageTest<OutFile> {

        @Override
        public List<TestCase<OutFile>> generate() {

            return Arrays.asList(
                new TestCase<OutFile>()
                    .addArguments("-in", "test/small.png", "-out", "test/small-energy.png")
                    .setAttach(new OutFile("test/small-energy.png", 15, 10, "931d2f37bb499ef6892db026f57525ba")),

                new TestCase<OutFile>()
                    .addArguments("-in", "test/blue.png", "-out", "test/blue-energy.png")
                    .setAttach(new OutFile("test/blue-energy.png", 500, 334, "0bdde2d55124785b16df005088f17e1a")),

                new TestCase<OutFile>()
                    .addArguments("-in", "test/trees.png", "-out", "test/trees-energy.png")
                    .setAttach(new OutFile("test/trees-energy.png", 600, 429, "89c4037e6c0b0de040d9fb85e4450ebc"))
            );
        }

        @Override
        public CheckResult check(String reply, OutFile expectedFile) {
            try {
                expectedFile.compareActualDimensions();
                expectedFile.compareWithActualMD5();
            } catch (CheckFailException e) {
                return CheckResult.wrong(e.getMessage());
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/blue.png
  visible: false
  learner_created: false
- name: test/small.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAA8AAAAKCAIAAADkeZOuAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAActJREFUGFcVyz1v00AYAGDf2efYcS6xY2onTZNYhYZSAaLqBKK/gBVloRJCTLAwVgIJ2qUDFYIBImWjEzMSEwNKJr5EADEQBIKilgo1UaCJff58fdD9eVBlR0ixUDIWbXw0cVmv9VxIE4XLuKmCTopfzzj98yK4+oQdcSm6/3bFIgv6zLm/RoYlk4+vO09ebJTAKifT3iUg2w1td14CVnBd08uih99vzqFlWa/HmupLfj/ubdy9WopME4rsWkR/1pW9kjE4wZNwijXQFjyrsoYSKJzgEXXf8e7W+rqR5gmXAKXyFak4mgpjvNjdFKGGHsdPy56jhVmQ8Rf6bTVuOoPS7KPKBDMPBeqKbLnFX4VBp3xRoCE6gPaBX01AwVK0rFwfpLvVP/axB5QjcGXRa2LIhUwOLre2AWHE+VoiZDY55pDcQbfRGI63JR2f1PJLoYQ5T8fTQ+HCsCbMgZAcagFQaz+X+0yjCEY5tz/89GOoZLhsxlmZi6ZtWUvVCj+tRjZKglsokttvVGc8Swx932Q7Aut+eJV1cS3Q/wfq2Mopi9IaAYq8vRuSmrnXwzNoIZsrjgvRb9/vvH+phaQS5FUgYiFjnq2bZJ6Exj/1hM6t/HGy9AAAAABJRU5ErkJggg==
  learner_created: false
- name: test/trees.png
  visible: false
  learner_created: false
- name: test/small-energy.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/100/stages/552/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    Hash sum of your image (40027451afdb402dbafc28bb51974ecd) does not match expected value

    Please find below the output of your program during this failed test.

    ---

    Arguments: -in test/small.png -out test/small-energy.png

    stderr:
    image 15 x 10
    E(0,0)=116.01724009818541 left: 0,0 right: 1,0 top: 0,0 bottom: 0,1
    E(0,1)=122.98373876248843 left: 0,1 right: 1,1 top: 0,0 bottom: 0,2
    E(0,2)=41.14608122288197 left: 0,2 right: 1,2 top: 0,1 bottom: 0,3
    E(0,3)=31.38470965295043 left: 0,3 right: 1,3 top: 0,2 bottom: 0,4
    E(0,4)=83.81527307120105 left: 0,4 right: 1,4 top: 0,3 bottom: 0,5
    E(0,5)=96.17692030835673 left: 0,5 right: 1,5 top: 0,4 bottom: 0,6
    E(0,6)=14.560219778561036 left: 0,6 right: 1,6 top: 0,5 bottom: 0,7
    E(0,7)=3.0 left: 0,7 right: 1,7 top: 0,6 bottom: 0,8
    E(0,8)=10.04987562112089 left: 0,8 right: 1,8 top: 0,7 bottom: 0,9
    E(0,9)=8.06225774829855 left: 0,9 right: 1,9 top: 0,8 bottom: 0,9
    E(1,0)=141.718029904455 left: 0,0 right: 2,0 top: 1,0 bottom: 1,1
    E(1,1)=164.4506004853737 left: 0,1 right: 2,1 top: 1,0 bottom: 1,2
    E(1,2)=49.73932046178355 left: 0,2 right: 2,2 top: 1,1 bottom: 1,3
    E(1,3)=37.0 left: 0,3 right: 2,3 top: 1,2 bottom: 1,4
    E(1,4)=50.91168824543142 left: 0,4 right: 2,4 top: 1,3 bottom: 1,5
    E(1,5)=68.6804193347711 left: 0,5 right: 2,5 top: 1,4 bottom: 1,6
    E(1,6)=124.42668524074729 left: 0,6 right: 2,6 top: 1,5 bottom: 1,7
    E(1,7)=106.01886624558857 left: 0,7 right: 2,7 top: 1,6 bottom: 1,8
    E(1,8)=102.17631819555841 left: 0,8 right: 2,8 top: 1,7 bottom: 1,9
    E(1,9)=111.07204868912791 left: 0,9 right: 2,9 top: 1,8 bottom: 1,9
    E(2,0)=140.11780757633915 left: 1,0 right: 3,0 top: 2,0 bottom: 2,1
    E(2,1)=142.0 left: 1,1 right: 3,1 top: 2,0 bottom: 2,2
    E(2,2)=17.029386365926403 left: 1,2 right: 3,2 top: 2,1 bottom: 2,3
    E(2,3)=8.602325267042627 left: 1,3 right: 3,3 top: 2,2 bottom: 2,4
    E(2,4)=25.298221281347036 left: 1,4 right: 3,4 top: 2,3 bottom: 2,5
    E(2,5)=62.03224967708329 left: 1,5 right: 3,5 top: 2,4 bottom: 2,6
    E(2,6)=138.75518008348374 left: 1,6 right: 3,6 top: 2,5 bottom: 2,7
    E(2,7)=95.35197952848173 left: 1,7 right: 3,7 top: 2,6 bottom: 2,8
    E(2,8)=72.56721022610694 left: 1,8 right: 3,8 top: 2,7 bottom: 2,9
    E(2,9)=88.45903006477066 left: 1,9 right: 3,9 top: 2,8 bottom: 2,9
    E(3,0)=94.92101980067429 left: 2,0 right: 4,0 top: 3,0 bottom: 3,1
    E(3,1)=116.92732785794773 left: 2,1 right: 4,1 top: 3,0 bottom: 3,2
    E(3,2)=34.92849839314596 left: 2,2 right: 4,2 top: 3,1 bottom: 3,3
    E(3,3)=20.248456731316587 left: 2,3 right: 4,3 top: 3,2 bottom: 3,4
    E(3,4)=49.92995093127971 left: 2,4 right: 4,4 top: 3,3 bottom: 3,5
    E(3,5)=202.11135544545735 left: 2,5 right: 4,5 top: 3,4 bottom: 3,6
    E(3,6)=144.46106741956464 left: 2,6 right: 4,6 top: 3,5 bottom: 3,7
    E(3,7)=49.36598018878993 left: 2,7 right: 4,7 top: 3,6 bottom: 3,8
    E(3,8)=37.013511046643494 left: 2,8 right: 4,8 top: 3,7 bottom: 3,9
    E(3,9)=42.941821107167776 left: 2,9 right: 4,9 top: 3,8 bottom: 3,9
    E(4,0)=102.39628899525607 left: 3,0 right: 5,0 top: 4,0 bottom: 4,1
    E(4,1)=123.00406497347964 left: 3,1 right: 5,1 top: 4,0 bottom: 4,2
    E(4,2)=54.56189146281496 left: 3,2 right: 5,2 top: 4,1 bottom: 4,3
    E(4,3)=72.73238618387272 left: 3,3 right: 5,3 top: 4,2 bottom: 4,4
    E(4,4)=231.24878378058554 left: 3,4 right: 5,4 top: 4,3 bottom: 4,5
    E(4,5)=262.9752840097335 left: 3,5 right: 5,5 top: 4,4 bottom: 4,6
    E(4,6)=179.61069010501575 left: 3,6 right: 5,6 top: 4,5 bottom: 4,7
    E(4,7)=184.5670609832643 left: 3,7 right: 5,7 top: 4,6 bottom: 4,8
    E(4,8)=24.041630560342615 left: 3,8 right: 5,8 top: 4,7 bottom: 4,9
    E(4,9)=15.524174696260024 left: 3,9 right: 5,9 top: 4,8 bottom: 4,9
    E(5,0)=102.95630140987001 left: 4,0 right: 6,0 top: 5,0 bottom: 5,1
    E(5,1)=180.71247881648904 left: 4,1 right: 6,1 top: 5,0 bottom: 5,2
    E(5,2)=163.22989922192565 left: 4,2 right: 6,2 top: 5,1 bottom: 5,3
    E(5,3)=188.98677202386415 left: 4,3 right: 6,3 top: 5,2 bottom: 5,4
    E(5,4)=159.45218719101973 left: 4,4 right: 6,4 top: 5,3 bottom: 5,5
    E(5,5)=14.422205101855956 left: 4,5 right: 6,5 top: 5,4 bottom: 5,6
    E(5,6)=135.05924625881784 left: 4,6 right: 6,6 top: 5,5 bottom: 5,7
    E(5,7)=170.18813119603846 left: 4,7 right: 6,7 top: 5,6 bottom: 5,8
    E(5,8)=55.154328932550705 left: 4,8 right: 6,8 top: 5,7 bottom: 5,9
    E(5,9)=38.63935817272331 left: 4,9 right: 6,9 top: 5,8 bottom: 5,9
    E(6,0)=8.06225774829855 left: 5,0 right: 7,0 top: 6,0 bottom: 6,1
    E(6,1)=65.06919393998976 left: 5,1 right: 7,1 top: 6,0 bottom: 6,2
    E(6,2)=98.99494936611666 left: 5,2 right: 7,2 top: 6,1 bottom: 6,3
    E(6,3)=85.0881895447306 left: 5,3 right: 7,3 top: 6,2 bottom: 6,4
    E(6,4)=66.12110101926616 left: 5,4 right: 7,4 top: 6,3 bottom: 6,5
    E(6,5)=65.19202405202648 left: 5,5 right: 7,5 top: 6,4 bottom: 6,6
    E(6,6)=81.39410298049853 left: 5,6 right: 7,6 top: 6,5 bottom: 6,7
    E(6,7)=117.44360348695028 left: 5,7 right: 7,7 top: 6,6 bottom: 6,8
    E(6,8)=99.16148445843275 left: 5,8 right: 7,8 top: 6,7 bottom: 6,9
    E(6,9)=88.02272433866155 left: 5,9 right: 7,9 top: 6,8 bottom: 6,9
    E(7,0)=19.72308292331602 left: 6,0 right: 8,0 top: 7,0 bottom: 7,1
    E(7,1)=50.695167422546305 left: 6,1 right: 8,1 top: 7,0 bottom: 7,2
    E(7,2)=43.56604182158393 left: 6,2 right: 8,2 top: 7,1 bottom: 7,3
    E(7,3)=49.193495504995376 left: 6,3 right: 8,3 top: 7,2 bottom: 7,4
    E(7,4)=31.144823004794873 left: 6,4 right: 8,4 top: 7,3 bottom: 7,5
    E(7,5)=41.88078318274385 left: 6,5 right: 8,5 top: 7,4 bottom: 7,6
    E(7,6)=28.460498941515414 left: 6,6 right: 8,6 top: 7,5 bottom: 7,7
    E(7,7)=29.068883707497267 left: 6,7 right: 8,7 top: 7,6 bottom: 7,8
    E(7,8)=53.33854141237835 left: 6,8 right: 8,8 top: 7,7 bottom: 7,9
    E(7,9)=53.08483775994799 left: 6,9 right: 8,9 top: 7,8 bottom: 7,9
    E(8,0)=40.01249804748511 left: 7,0 right: 9,0 top: 8,0 bottom: 8,1
    E(8,1)=33.1058907144937 left: 7,1 right: 9,1 top: 8,0 bottom: 8,2
    E(8,2)=15.811388300841896 left: 7,2 right: 9,2 top: 8,1 bottom: 8,3
    E(8,3)=12.165525060596439 left: 7,3 right: 9,3 top: 8,2 bottom: 8,4
    E(8,4)=29.410882339705484 left: 7,4 right: 9,4 top: 8,3 bottom: 8,5
    E(8,5)=13.038404810405298 left: 7,5 right: 9,5 top: 8,4 bottom: 8,6
    E(8,6)=4.123105625617661 left: 7,6 right: 9,6 top: 8,5 bottom: 8,7
    E(8,7)=28.635642126552707 left: 7,7 right: 9,7 top: 8,6 bottom: 8,8
    E(8,8)=41.23105625617661 left: 7,8 right: 9,8 top: 8,7 bottom: 8,9
    E(8,9)=38.05259518088089 left: 7,9 right: 9,9 top: 8,8 bottom: 8,9
    E(9,0)=35.34119409414458 left: 8,0 right: 10,0 top: 9,0 bottom: 9,1
    E(9,1)=23.769728648009426 left: 8,1 right: 10,1 top: 9,0 bottom: 9,2
    E(9,2)=5.830951894845301 left: 8,2 right: 10,2 top: 9,1 bottom: 9,3
    E(9,3)=11.40175425099138 left: 8,3 right: 10,3 top: 9,2 bottom: 9,4
    E(9,4)=8.246211251235321 left: 8,4 right: 10,4 top: 9,3 bottom: 9,5
    E(9,5)=23.53720459187964 left: 8,5 right: 10,5 top: 9,4 bottom: 9,6
    E(9,6)=31.04834939252005 left: 8,6 right: 10,6 top: 9,5 bottom: 9,7
    E(9,7)=55.00909015790027 left: 8,7 right: 10,7 top: 9,6 bottom: 9,8
    E(9,8)=52.20153254455275 left: 8,8 right: 10,8 top: 9,7 bottom: 9,9
    E(9,9)=36.345563690772494 left: 8,9 right: 10,9 top: 9,8 bottom: 9,9
    E(10,0)=53.48831648126533 left: 9,0 right: 11,0 top: 10,0 bottom: 10,1
    E(10,1)=24.08318915758459 left: 9,1 right: 11,1 top: 10,0 bottom: 10,2
    E(10,2)=21.37755832643195 left: 9,2 right: 11,2 top: 10,1 bottom: 10,3
    E(10,3)=25.0 left: 9,3 right: 11,3 top: 10,2 bottom: 10,4
    E(10,4)=32.28002478313795 left: 9,4 right: 11,4 top: 10,3 bottom: 10,5
    E(10,5)=14.866068747318506 left: 9,5 right: 11,5 top: 10,4 bottom: 10,6
    E(10,6)=49.33558553417604 left: 9,6 right: 11,6 top: 10,5 bottom: 10,7
    E(10,7)=73.38937252763509 left: 9,7 right: 11,7 top: 10,6 bottom: 10,8
    E(10,8)=38.27531841800928 left: 9,8 right: 11,8 top: 10,7 bottom: 10,9
    E(10,9)=19.209372712298546 left: 9,9 right: 11,9 top: 10,8 bottom: 10,9
    E(11,0)=35.05709628591621 left: 10,0 right: 12,0 top: 11,0 bottom: 11,1
    E(11,1)=16.15549442140351 left: 10,1 right: 12,1 top: 11,0 bottom: 11,2
    E(11,2)=25.179356624028344 left: 10,2 right: 12,2 top: 11,1 bottom: 11,3
    E(11,3)=23.706539182259394 left: 10,3 right: 12,3 top: 11,2 bottom: 11,4
    E(11,4)=30.4138126514911 left: 10,4 right: 12,4 top: 11,3 bottom: 11,5
    E(11,5)=43.01162633521314 left: 10,5 right: 12,5 top: 11,4 bottom: 11,6
    E(11,6)=70.40596565632774 left: 10,6 right: 12,6 top: 11,5 bottom: 11,7
    E(11,7)=104.38869670610895 left: 10,7 right: 12,7 top: 11,6 bottom: 11,8
    E(11,8)=21.587033144922902 left: 10,8 right: 12,8 top: 11,7 bottom: 11,9
    E(11,9)=33.301651610693426 left: 10,9 right: 12,9 top: 11,8 bottom: 11,9
    E(12,0)=19.026297590440446 left: 11,0 right: 13,0 top: 12,0 bottom: 12,1
    E(12,1)=20.615528128088304 left: 11,1 right: 13,1 top: 12,0 bottom: 12,2
    E(12,2)=17.88854381999832 left: 11,2 right: 13,2 top: 12,1 bottom: 12,3
    E(12,3)=47.885279575251516 left: 11,3 right: 13,3 top: 12,2 bottom: 12,4
    E(12,4)=168.2676439485619 left: 11,4 right: 13,4 top: 12,3 bottom: 12,5
    E(12,5)=86.14522621712709 left: 11,5 right: 13,5 top: 12,4 bottom: 12,6
    E(12,6)=105.3612832116238 left: 11,6 right: 13,6 top: 12,5 bottom: 12,7
    E(12,7)=114.96521212958292 left: 11,7 right: 13,7 top: 12,6 bottom: 12,8
    E(12,8)=21.095023109728988 left: 11,8 right: 13,8 top: 12,7 bottom: 12,9
    E(12,9)=40.496913462633174 left: 11,9 right: 13,9 top: 12,8 bottom: 12,9
    E(13,0)=36.05551275463989 left: 12,0 right: 14,0 top: 13,0 bottom: 13,1
    E(13,1)=35.17101079013795 left: 12,1 right: 14,1 top: 13,0 bottom: 13,2
    E(13,2)=32.802438933713454 left: 12,2 right: 14,2 top: 13,1 bottom: 13,3
    E(13,3)=177.7751388693031 left: 12,3 right: 14,3 top: 13,2 bottom: 13,4
    E(13,4)=192.43960091415696 left: 12,4 right: 14,4 top: 13,3 bottom: 13,5
    E(13,5)=198.59506539690256 left: 12,5 right: 14,5 top: 13,4 bottom: 13,6
    E(13,6)=42.638011210655684 left: 12,6 right: 14,6 top: 13,5 bottom: 13,7
    E(13,7)=94.15412895885129 left: 12,7 right: 14,7 top: 13,6 bottom: 13,8
    E(13,8)=18.973665961010276 left: 12,8 right: 14,8 top: 13,7 bottom: 13,9
    E(13,9)=25.298221281347036 left: 12,9 right: 14,9 top: 13,8 bottom: 13,9
    E(14,0)=20.223748416156685 left: 13,0 right: 14,0 top: 14,0 bottom: 14,1
    E(14,1)=20.615528128088304 left: 13,1 right: 14,1 top: 14,0 bottom: 14,2
    E(14,2)=23.259406699226016 left: 13,2 right: 14,2 top: 14,1 bottom: 14,3
    E(14,3)=149.03019828209315 left: 13,3 right: 14,3 top: 14,2 bottom: 14,4
    E(14,4)=7.0 left: 13,4 right: 14,4 top: 14,3 bottom: 14,5
    E(14,5)=179.02513789968157 left: 13,5 right: 14,5 top: 14,4 bottom: 14,6
    E(14,6)=45.09988913511872 left: 13,6 right: 14,6 top: 14,5 bottom: 14,7
    E(14,7)=95.42536350467836 left: 13,7 right: 14,7 top: 14,6 bottom: 14,8
    E(14,8)=11.180339887498949 left: 13,8 right: 14,8 top: 14,7 bottom: 14,9
    E(14,9)=9.433981132056603 left: 13,9 right: 14,9 top: 14,8 bottom: 14,9
  time: Tue, 17 Aug 2021 17:01:37 UTC
record: -1
